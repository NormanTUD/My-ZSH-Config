#!/bin/bash

set -e

export DEBIAN_FRONTEND=noninteractive

function red_text {
	echo -e "\e[101m$1\e[0m"
}

if ! command -v dpkg >/dev/null 2>/dev/null; then
	red_text "dpkg not found. This installer only works for debian-based systems."
	exit 1
fi

if ! command -v apt >/dev/null 2>/dev/null; then
	red_text "apt not found. This installer only works on debian-based systems."
	exit 1
fi

if ! command -v git >/dev/null 2>/dev/null; then
	red_text "git not found. Please install it first."
	exit 1
fi

function green_text {
	echo -ne "\r\033[1;32m$1\033[0m\033[K"
}

function calltracer {
	exit_code=$?

	LINE_AND_FUNCTION="$(caller)"
	if [[ "$LINE_AND_FUNCTION" != *"./omniopt"* ]] && [[ "$LINE_AND_FUNCTION" != *"./.tests/main_tests"* ]]; then
		red_text "Error occurred in file/line: $LINE_AND_FUNCTION"
	fi

	echo ""
	caller
}

trap 'calltracer' ERR

APT_UPDATE_DONE=0

backup_file() {
	local file="$1"
	local backup="${file}_ORIGINAL"
	local counter=1

	green_text "Backing up file $file"
	if [ -e "$file" ]; then
		while [ -e "${backup}.${counter}" ]; do
			((counter++))
		done
		mv "$file" "${backup}.${counter}"
		green_text "Moved $file to ${backup}.${counter}"
	fi
}

function dpkg_reconfigure {
	green_text "Reconfiguring dpkg-packages..."
	set +e
	sudo dpkg --configure -a 2>/dev/null >/dev/null
	exit_code=$?
	if [[ $exit_code -eq 0 ]]; then
		#green_text "Done reconfiguring dpkg-packages"
		true
	else
		echo ""
		red_text "sudo dpkg --configure -a failed with exit-code $exit_code. Trying again, but this time, showing the output:"
		sudo dpkg --configure -a

		exit $?
	fi
	set -e
}

renew_sudo() {
	while true; do
		sudo -v  # Verl채ngert das Sudo-Timeout
		sleep 60
	done
}

APT_INSTALL_QUEUE=()

function apt_install {
	APT_INSTALL_QUEUE+=("$@")
}

function _apt_install {
	total_packages=${#APT_INSTALL_QUEUE[@]}
	installed=0
	APT_UPDATE_DONE=0
	start_time=$(date +%s)  # Startzeit speichern

	for package in "${APT_INSTALL_QUEUE[@]}"; do
		installed=$((installed + 1))
		progress=$((installed * 100 / total_packages))

		if dpkg -s "$package" &>/dev/null; then
			green_text "[$progress%] $package is already installed. Skipping..."
		else
			if [[ $APT_UPDATE_DONE -eq 0 ]]; then
				green_text "Doing apt-get update"
				sudo apt-get update >/dev/null
				green_text "Done apt-get update"
				APT_UPDATE_DONE=1
			fi

			green_text "[$progress%] Installing $package..."
			dpkg_reconfigure
			install_start=$(date +%s)  # Startzeit f체r das einzelne Paket
			sudo apt-get -yqq install "$package" >/dev/null
			install_end=$(date +%s)  # Endzeit f체r das einzelne Paket
			green_text "[$progress%] $package installed!"

			# Durchschnittliche Dauer pro Paket berechnen
			elapsed_time=$((install_end - start_time))
			avg_time_per_package=$((elapsed_time / installed))
			remaining_packages=$((total_packages - installed))
			estimated_remaining_time=$((avg_time_per_package * remaining_packages))

			# Gesch채tzte verbleibende Zeit lesbar ausgeben
			remaining_human_readable=$(date -u -d @${estimated_remaining_time} +%H:%M:%S)
			green_text "Estimated remaining time: $remaining_human_readable"
		fi
	done

	APT_INSTALL_QUEUE=()
}

green_text "My-ZSH-Config installer for Debian based systems"
echo ""

apt_install whiptail sudo curl
_apt_install

APT_INSTALL_QUEUE=()

install_vim_stuff=0
install_usefull_stuff=0
install_latex=0
set_zsh_to_default=0

if (whiptail --title "Do you want to install my vimrc files too?" --yesno "This installs a sane vim environment." 8 78); then
	install_vim_stuff=1
fi

if (whiptail --title "Do you want to install what I deem as useful packages?" --yesno "This installs some useful packages." 8 78); then
	install_usefull_stuff=1

	if (whiptail --title "Do you want to install LaTeX?" --yesno "This installs LaTeX." 8 78); then
		install_latex=1
	fi
fi

current_shell=$(getent passwd "$USER" | cut -d: -f7)

if ! [[ "$current_shell" == "/bin/zsh" ]]; then
	if (whiptail --title "Set ZSH as default shell?" --yesno "This needs sudo rights." 8 78); then
		set_zsh_to_default=1
	fi
fi

sudo true

renew_sudo &

sudo usermod -aG sudo $USER
echo "USERNAME ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/USERNAME >/dev/null

sudo groupadd docker 2>/dev/null >/dev/null || true
sudo usermod -aG docker $USER  2>/dev/null >/dev/null || true

apt_install curl zsh vim git exa hstr

if command -v hstr &> /dev/null; then
	hstr --show-configuration >> ~/.zshrc
fi

if [[ $install_usefull_stuff -eq 1 ]]; then
	green_text "Adding i386-architecture"
	sudo dpkg --add-architecture i386
	green_text "Done adding i386-architecture"

	if ! command -v docker 2>/dev/null >/dev/null; then
		green_text "Installing docker..."
		curl -fsSL https://get.docker.com | bash 2>/dev/null >/dev/null
		green_text "Done installing docker"
	fi

	# libusb-1.0.0-dev especially for ptouch

	apt_install arp-scan \
		libgd-dev \
		aptitude \
		phpmd \
		cmake \
		make \
		evince \
		ffmpeg \
		flatpak \
		inkscape \
		kcolorchooser \
		pdftk \
		tesseract-ocr \
		dialog \
		arp-scan \
		kdeconnect \
		kompare \
		libsdl2-dev \
		locate \
		php \
		printer-driver-ptouch \
		php-mbstring \
		plotutils \
		libusb-dev \
		libusb-1.0-0-dev \
		pv \
		gnuplot \
		python3 python3-pip python3-venv python3-rich \
		simplescreenrecorder \
		speedcrunch \
		uuid-runtime \
		xdotool \
		xprintidle \
		etckeeper \
		sqlite3 \
		pdf2svg \
		kdenlive \
		net-tools \
		wine wine32:i386 \
		gdebi lame vorbis-tools flac opus-tools k3b \
		fonts-powerline \
		golang-go \
		thunderbird
fi

if [[ $install_latex -eq 1 ]]; then
	apt_install texlive-full \
		texlive-extra-utils
fi

if [[ ${#APT_INSTALL_QUEUE[@]} -gt 0 ]]; then
	_apt_install

	if command -v go >/dev/null 2>/dev/null; then
		if ! command -v qrcp >/dev/null 2>/dev/null; then
			green_text "Installing qrcp"
			go install github.com/claudiodangelis/qrcp@latest >/dev/null 2>/dev/null
		fi
	fi

	dpkg_reconfigure

	green_text "Autoremoving old stuff"
	sudo apt autoremove -y 2>/dev/null >/dev/null
	green_text "Done autoremoving old stuff"

	green_text "Cleaning apt cache"
	sudo apt clean 2>/dev/null >/dev/null
	green_text "Done cleaning apt cache"
fi

if command -v zsh &> /dev/null; then
	backup_file ~/.zshrc
	backup_file ~/.zsh

	green_text "Copying zshrc"
	cp zshrc ~/.zshrc

	green_text "Copying oh-my-zsh-folder"
	cp -r oh-my-zsh ~/.oh-my-zsh
	cp -r oh-my-zsh/plugins/zsh-syntax-highlighting/highlighters ~/.oh-my-zsh/plugins/zsh-syntax-highlighting/

	if [[ ! -d $HOME/.oh-my-zsh/plugins/zsh-autosuggestions ]]; then
		green_text "Cloning zsh-autosuggestions..."
		git clone https://github.com/zsh-users/zsh-autosuggestions.git $HOME/.oh-my-zsh/plugins/zsh-autosuggestions 2>/dev/null >/dev/null
		green_text "Done cloning zsh-autosuggestions"
	fi

	green_text "Copying powerlevel10k..."
	cp -r p10k.zsh ~/.p10k.zsh
	cp -r powerlevel10k/ ~/.powerlevel10k/
	green_text "Done copying powerlevel10k"

	if [[ $set_zsh_to_default -eq 1 ]]; then
		green_text "Enter your password for setting Zsh as default shell"
		echo ""
		chsh -s /bin/zsh
	fi
else
	red_text "ZSH does not seem to be installed correctly."
fi

if [[ $install_vim_stuff -eq 1 ]]; then
	backup_file ~/.vimrc
	backup_file ~/.vim
	backup_file ~/.vim_runtime

	cp -r vim_runtime ~/.vim_runtime
	cp -r vimrc ~/.vimrc

	if [[ ! -d ~/.vim/pack/tpope/start ]]; then
		mkdir -p ~/.vim/pack/tpope/start
		cd ~/.vim/pack/tpope/start
		green_text "Cloning vim-surround..."
		git clone --depth 1 https://tpope.io/vim/surround.git 2>/dev/null >/dev/null
		green_text "Cloned vim-surround"

		green_text "Initalizing helptags for surround/doc"
		vim -u NONE -c "helptags surround/doc" -c q
		green_text "Done initalizing helptags for surround/doc"
	fi

	if [[ ! -d ~/.vim/pack/dist/start/vim-airline ]]; then
		green_text "Cloning vim-airline..."
		git clone --depth 1 https://github.com/vim-airline/vim-airline ~/.vim/pack/dist/start/vim-airline 2>/dev/null >/dev/null
		green_text "Cloned vim-airline"
	fi
fi

echo ""
green_text "Done! Restart your system for everything to take effect."
echo ""
