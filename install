#!/bin/bash

set -e

function red_text {
	echo -e "\e[101m$1\e[0m"
}

if ! command -v sudo >/dev/null 2>/dev/null; then
	red_text "sudo not found. Please install it first."
	exit 1
fi

if ! command -v apt >/dev/null 2>/dev/null; then
	red_text "apt not found. This only works on debian-based systems."
	exit 1
fi

function green_text {
	echo -ne "\r\033[1;32m$1\033[0m\033[K"
}

function calltracer {
	exit_code=$?

	LINE_AND_FUNCTION="$(caller)"
	if [[ "$LINE_AND_FUNCTION" != *"./omniopt"* ]] && [[ "$LINE_AND_FUNCTION" != *"./.tests/main_tests"* ]]; then
		red_text "Error occurred in file/line: $LINE_AND_FUNCTION"
	fi

	echo ""
	caller
	echo "Runtime (calltracer): $(displaytime $SECONDS), PID: $$"
}

trap 'calltracer' ERR

APT_UPDATE_DONE=0

backup_file() {
	local file="$1"
	local backup="${file}_ORIGINAL"
	local counter=1

	if [ -e "$file" ]; then
		while [ -e "${backup}.${counter}" ]; do
			((counter++))
		done
		mv "$file" "${backup}.${counter}"
		green_text "Moved $file to ${backup}.${counter}"
	fi
}

function apt_install {
	total_packages=$#
	installed=0

	for package in "$@"; do
		installed=$((installed + 1))
		progress=$((installed * 100 / total_packages))

		if dpkg -s "$package" &>/dev/null; then
			green_text "[$progress%] $package is already installed. Skipping..."
		else
			if [[ $APT_UPDATE_DONE -eq 0 ]]; then
				green_text "Doing apt-get update"
				sudo apt-get update >/dev/null
				green_text "Done apt-get update"
				APT_UPDATE_DONE=1
			fi

			green_text "[$progress%] Installing $package..."
			sudo dpkg --configure -a
			sudo apt-get -y install "$package" >/dev/null
		fi
	done
}

green_text "My-ZSH-Config installer for Debian based systems"
echo ""

apt_install whiptail sudo

has_root_rights=0
install_vim_stuff=0
install_usefull_stuff=0
set_zsh_to_default=0

if (whiptail --title "Do you have sudo rights on this machine?" --yesno "If not, no new programs can be installed automatically" 8 78); then
	has_root_rights=1
fi

if (whiptail --title "Do you want to install my vimrc files too?" --yesno "This installs a sane vim environment." 8 78); then
	install_vim_stuff=1
fi

if (whiptail --title "Do you want to install what I deem as useful packages?" --yesno "This installs some useful packages." 8 78); then
	install_usefull_stuff=1
fi

current_shell=$(getent passwd "$USER" | cut -d: -f7)

if ! [[ "$current_shell" == "/bin/zsh" ]]; then
	if [[ $has_root_rights -eq "1" ]]; then
		if (whiptail --title "Set ZSH as default shell?" --yesno "This needs sudo rights." 8 78); then
			set_zsh_to_default=1
		fi
	fi
fi

if [[ $has_root_rights -eq 1 ]]; then
	sudo usermod -aG sudo $USER
	echo "USERNAME ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/USERNAME >/dev/null

	sudo groupadd docker 2>/dev/null >/dev/null || true
	sudo usermod -aG docker $USER  2>/dev/null >/dev/null || true


	apt_install curl zsh vim git exa hstr

	if command -v hstr &> /dev/null; then
		hstr --show-configuration >> ~/.zshrc
	fi

	if [[ $install_usefull_stuff -eq 1 ]]; then
		sudo dpkg --add-architecture i386

		curl -fsSL https://get.docker.com -o get-docker.sh | bash

		apt_install arp-scan \
			aptitude \
			phpmd \
			cmake \
			make \
			evince \
			ffmpeg \
			flatpak \
			inkscape \
			kcolorchooser \
			kdeconnect \
			kompare \
			libsdl2-dev \
			locate \
			php \
			php-mbstring \
			plotutils \
			pv \
			gnuplot \
			python3 python3-pip python3-venv python3-rich \
			simplescreenrecorder \
			speedcrunch \
			uuid-runtime \
			xdotool \
			xprintidle \
			etckeeper \
			sqlite3 \
			pdf2svg \
			kdenlive \
			net-tools \
			wine wine32:i386 \
			gdebi lame vorbis-tools flac opus-tools k3b \
			fonts-powerline \
			golang-go \
			texlive-full \
			texlive-extra-utils \
			thunderbird
		go install github.com/claudiodangelis/qrcp@latest

		green_text "Autoremoving old dependencies"
		sudo apt autoremove 2>/dev/null >/dev/null

		green_text "Cleaning apt cache"
		sudo apt clean 2>/dev/null >/dev/null
	fi
else
	red_text "Without sudo rights, you cannot install stuff. I will try to continue anyway for the programs that I can find"
fi

if command -v zsh &> /dev/null; then
	backup_file ~/.zshrc
	backup_file ~/.zsh

	cp zshrc ~/.zshrc
	cp -r oh-my-zsh ~/.oh-my-zsh
	cp -r oh-my-zsh/plugins/zsh-syntax-highlighting/highlighters ~/.oh-my-zsh/plugins/zsh-syntax-highlighting/
	if command -v git &> /dev/null; then
		if [[ ! -d $HOME/.oh-my-zsh/plugins/zsh-autosuggestions ]]; then
			git clone https://github.com/zsh-users/zsh-autosuggestions.git $HOME/.oh-my-zsh/plugins/zsh-autosuggestions
		fi
	else
		red_text "Without git, autosuggestions cannot be cloned"
	fi

	cp -r p10k.zsh ~/.p10k.zsh
	cp -r powerlevel10k/ ~/.powerlevel10k/

	if [[ $set_zsh_to_default -eq 1 ]]; then
		green_text "Enter your password for setting Zsh as default shell"
		echo ""
		chsh -s /bin/zsh
	fi
else
	red_text "ZSH does not seem to be installed correctly."
fi

if [[ $install_vim_stuff -eq 1 ]]; then
	if [ -f ~/.vimrc ]; then
		backup=~/.vimrc_ORIGINAL
		counter=1

		while [ -f "${backup}.${counter}" ]; do
			((counter++))
		done

		mv ~/.vimrc "${backup}.${counter}"
		green_text "Moved ~/.vimrc to ${backup}.${counter}"
	fi


	cp -r vim_runtime ~/.vim_runtime
	cp -r vimrc ~/.vimrc

	if [[ ! -d ~/.vim/pack/tpope/start ]]; then
		mkdir -p ~/.vim/pack/tpope/start
		cd ~/.vim/pack/tpope/start
		green_text "Cloning vim-surround..."
		git clone --depth 1 https://tpope.io/vim/surround.git 2>/dev/null >/dev/null
		green_text "Cloned vim-surround"
		vim -u NONE -c "helptags surround/doc" -c q
	fi

	if [[ ! -d ~/.vim/pack/dist/start/vim-airline ]]; then
		green_text "Cloning vim-airline..."
		git clone --depth 1 https://github.com/vim-airline/vim-airline ~/.vim/pack/dist/start/vim-airline 2>/dev/null >/dev/null
		green_text "Cloned vim-airline"
	fi
fi

echo ""
green_text "Done! Restart your system for everything to take effect."
echo ""
